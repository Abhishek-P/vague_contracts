my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4,) + c (0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir<-list.files
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files("testdir")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R")
file.rename("mytest.R to mytest2.R")
file.rename("mytest.R" "to: "mytest2.R")
file.rename("mytest.R" "to" "mytest2.R")
file.rename()
file.rename(from "mytest.R" to "mytest2.R")
file.rename(from "mytest.R", to "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(old.dir)
1:20
pi:10
15
15:1
?`:`
seq(1, 20)
seq(0, 10, by = 0.5)
seq(5, 10, length=30)
my_seq,<-seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times =10)
rep(c(0, 1, 2), each = 10)
num_vect(0.5, 55, -10, 6)
num_vect<- c(0.5, 55, -10, 6)
tf<- num_vect<1
tf
num_vecr>=6
num_vect>=6
my_char<- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char, "Madigan")
my_name
paste(my_name, collapse=" ")
paste("Hello, "world!", sep = " "")
paste("Hello", "world!", sep = " "")
paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep =" ")
paste(1:3, c("X", "Y", "Z"), sep = ""
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
setwd("~/Dropbox (IPL)/Summercourses/RSRC/2020/Session2")
rm(list=ls())
getwd()
setwd("~/Dropbox (IPL)/Summercourses/RSRC/2020/Session2")
write_file(stims, "stimuli.json")
library(tidyverse)
library(jsonlite)
library(Hmisc)
library(binom)
library(brms)
library(EnvStats)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
theme_set(theme_bw())
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
source("/Users/madiganbrodsky/Desktop/legal_interpretation/vague_contracts/analyses/helpers.R")
# load core dataset
d <- read_csv("/Users/madiganbrodsky/Desktop/legal_interpretation/vague_contracts/results/1_falseconsensus/main-merged.csv")
# load extra information
metadata = read_csv("/Users/madiganbrodsky/Desktop/legal_interpretation/vague_contracts/experiments/1_falseconsensus/main/stimuli.csv") %>%
select(Title, version, locus_of_uncertainty, locus_of_uncertainty_location,name_gender) %>%
rename(title=Title)
d = d %>%
left_join(metadata,by=c("title","version"))
nonEnglishNativeLanguages <- c("Chinese", "Spanish", "spanish", "Punjabi", "Filipino", "Urdu")
excludedWorkers_nonNative <- unique((d %>%
filter(subject_information.language %in% nonEnglishNativeLanguages))$workerid)
excludedWorkers <- (d %>%
filter((version == "unambiguous_uncovered" & individual_judgment == "yes") |
(version == "unambiguous_covered" & individual_judgment == "no")) %>%
group_by(workerid) %>%
summarise(n = n()) %>%
filter(n > 1))$workerid
d <- d %>%
filter(!(workerid %in% excludedWorkers)) %>%
filter(!(workerid %in% excludedWorkers_nonNative))
transformed <- d %>%
select(workerid,title,version,individual_judgment,population_judgment,confidence,locus_of_uncertainty,locus_of_uncertainty_location,name_gender) %>%
group_by(version,title) %>%
mutate(total = n()) %>%
ungroup() %>%
group_by(version,title,individual_judgment,locus_of_uncertainty_location,name_gender) %>%
mutate(count = n()) %>%
mutate(true_proportion = binom.confint(x = count, n  = total, methods = "exact")$mean * 100,
ci_low = binom.confint(x = count, n  = total, methods = "exact")$lower * 100,
ci_high = binom.confint(x = count, n  = total, methods = "exact")$upper * 100,
agreement_mean = mean(population_judgment)) %>%
mutate(difference = as.numeric(population_judgment) - true_proportion) %>%
mutate(versionPretty = factor(version))
levels(transformed$versionPretty)
levels(transformed$versionPretty) <- c("Controversial", "Covered", "Not\ncovered")
# how many of each type of item
items = unique(transformed[,c("locus_of_uncertainty_location","title")])
table(items$locus_of_uncertainty_location)
new <- transformed %>%
filter(version == "controversial") %>% #%>%
group_by(title) %>% ## 'title' is added for posthoc analysis
mutate(yes = case_when(individual_judgment == "yes" ~ 1,
TRUE ~ 0),
no = case_when(individual_judgment == "no" ~ 1,
TRUE ~ 0),
cantdecide = case_when(individual_judgment == "cantdecide" ~ 1,
TRUE ~ 0)) %>%
summarise(nYes = sum(yes), nNo =sum(no), nCantDecide = sum(cantdecide),
propYes = sum(yes)/n(), propNo = sum(no)/n(), propCantDecide = sum(cantdecide)/n(), meanError = mean(difference), ) %>%
as.data.frame() %>%
arrange(propYes) %>%
mutate(title = replace(title, title == 'Goods Carrying Vehicle: Loss or Damage to Vehicle', 'Goods Carrying Vehicle'))
#Turn your 'title' column into a character vector
new$title <- as.character(new$title)
#Then turn it back into a factor with the levels in the correct order
new$title <- factor(new$title, levels=unique(new$title))
ggplot(data = new,
mapping = aes(x = title,
y = propYes)) +
geom_point(alpha = 0.8,
color = 'brown2') +
geom_hline(yintercept=0.5,linetype=2)+
xlab("Item Name") +
ylab("Proportion of Yes Responses") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Proportion of Yes Responses for Controversial Items")
ggplot(data = new,
mapping = aes(x = propYes,
y = meanError)) +
geom_smooth(method = 'lm',
formula = y ~ x,
color = "darkmagenta") +
geom_point(alpha = 0.8,
color = 'darkmagenta') +
# geom_jitter(alpha = 0.8,
#             color = 'darkmagenta')+
xlab("Proportion of Yes Responses") +
ylab("Mean Error (Individual Estimate - Actual Judgement)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Relationship between the proportion of 'yes' responses and estimation error for controversial items ")
ggplot(data = new,
mapping = aes(x = propYes,
y = meanError)) +
# geom_smooth(method = 'lm',
#             formula = y ~ x,
#             color = "darkmagenta") +
geom_point(alpha = 0.8,
color = 'darkmagenta') +
# geom_jitter(alpha = 0.8,
#             color = 'darkmagenta')+
xlab("Proportion of Yes Responses") +
ylab("Mean Error (Individual Estimate - Actual Judgement)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Relationship between the proportion of 'yes' responses and estimation error for controversial items ")
ggplot(data = new,
mapping = aes(x = propYes,
y = meanError)) +
geom_smooth(method = 'lm',
formula = y ~ x,
color = "darkmagenta") +
geom_point(alpha = 0.8,
color = 'darkmagenta') +
# geom_jitter(alpha = 0.8,
#             color = 'darkmagenta')+
xlab("Proportion of Yes Responses") +
ylab("Mean Error (Individual Estimate - Actual Judgement)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Relationship between the proportion of 'yes' responses and estimation error for controversial items ")
library(tidyverse)
library(jsonlite)
library(Hmisc)
library(binom)
library(brms)
library(EnvStats)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
theme_set(theme_bw())
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
source("../helpers.R")
# load core dataset
d <- read_csv("../../results/1_falseconsensus/main-merged.csv")
# load extra information
metadata = read_csv("../../experiments/1_falseconsensus/main/stimuli.csv") %>%
select(Title, version, locus_of_uncertainty, locus_of_uncertainty_location,name_gender) %>%
rename(title=Title)
d = d %>%
left_join(metadata,by=c("title","version"))
# NATIVE LANGUAGE EXCLUSIONS
nonEnglishNativeLanguages <- c("Chinese", "Spanish", "spanish", "Punjabi", "Filipino", "Urdu")
excludedWorkers_nonNative <- unique((d %>%
filter(subject_information.language %in% nonEnglishNativeLanguages))$workerid)
# EXCLUSIONS
excludedWorkers <- (d %>%
filter((version == "unambiguous_uncovered" & individual_judgment == "yes") |
(version == "unambiguous_covered" & individual_judgment == "no")) %>%
group_by(workerid) %>%
summarise(n = n()) %>%
filter(n > 1))$workerid
d <- d %>%
filter(!(workerid %in% excludedWorkers)) %>%
filter(!(workerid %in% excludedWorkers_nonNative))
# DATA TRANSFORMATIONS
transformed <- d %>%
select(workerid,title,version,individual_judgment,population_judgment,confidence,locus_of_uncertainty,locus_of_uncertainty_location,name_gender) %>%
group_by(version,title) %>%
mutate(total = n()) %>%
ungroup() %>%
group_by(version,title,individual_judgment,locus_of_uncertainty_location,name_gender) %>%
mutate(count = n()) %>%
mutate(true_proportion = binom.confint(x = count, n  = total, methods = "exact")$mean * 100,
ci_low = binom.confint(x = count, n  = total, methods = "exact")$lower * 100,
ci_high = binom.confint(x = count, n  = total, methods = "exact")$upper * 100,
agreement_mean = mean(population_judgment)) %>%
mutate(difference = as.numeric(population_judgment) - true_proportion) %>%
mutate(versionPretty = factor(version))
levels(transformed$versionPretty)
levels(transformed$versionPretty) <- c("Controversial", "Covered", "Not\ncovered")
# DATA TRANSFORMATIONS FOR GPT-3 FINETUNING
proportionsByItem <- transformed %>%
group_by(title,version) %>%
mutate(yes = case_when(individual_judgment == "yes" ~ 1,
TRUE ~ 0),
no = case_when(individual_judgment == "no" ~ 1,
TRUE ~ 0),
cantdecide = case_when(individual_judgment == "cantdecide" ~ 1,
TRUE ~ 0)) %>%
summarise(nYes = sum(yes), nNo =sum(no), nCantDecide = sum(cantdecide),
propYes = sum(yes)/n(), propNo = sum(no)/n(), propCantDecide = sum(cantdecide)/n())
fineTuneDataSet <- proportionsByItem %>%
inner_join(unique(d %>% select(item,title,version,header,continuation))) # %>%
# mutate(discreteLabel = case_when(propYes > .8 ~ "consensus_covered",
#                                  propYes > .6 ~ "leans_covered",
#                                  propYes > .4 ~ "no_consensus",
#                                  propYes > .2 ~ "leans_not_covered",
#                                  TRUE ~ "consensus_not_covered"))
# table(fineTuneDataSet$discreteLabel)
write_csv(fineTuneDataSet, "../../results/1_falseconsensus/fineTuneDataSet.csv")
# how many of each type of item
items = unique(transformed[,c("locus_of_uncertainty_location","title")])
table(items$locus_of_uncertainty_location)
#  definition_exh definition_incl       exclusion
#         35               3               8
transformed %>%
group_by(version) %>%
mutate(yes = case_when(individual_judgment == "yes" ~ 1,
TRUE ~ 0),
no = case_when(individual_judgment == "no" ~ 1,
TRUE ~ 0),
cantdecide = case_when(individual_judgment == "cantdecide" ~ 1,
TRUE ~ 0)) %>%
summarise(nYes = sum(yes), nNo =sum(no), nCantDecide = sum(cantdecide),
propYes = sum(yes)/n(), propNo = sum(no)/n(), propCantDecide = sum(cantdecide)/n())
# PLOT (HISTOGRAM OF DIFFERENCES BETWEEN POPULATION ESTIMATE AND TRUE PROPORTION)
transformed %>%
ggplot(aes(x = difference, fill = versionPretty)) +
geom_histogram(position="identity", alpha = 0.3) +
xlab("Participant error") +
ylab("Count") +
labs(fill='Condition') +
theme_bw() +
theme(legend.position = "top",
text = element_text(size=8)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
ggsave("graphs/errorHist.pdf", width = 3, height = 3, units = "in")
# PLOT (BY-ITEM, BY-CONDITION)
# NOTE: THIS TAKES A SUPER LONG TIME TO RENDER ON THE WHOLE DATASET...
# RUN AT YOUR OWN RISK
# transformed %>%
#   ggplot(aes(x = individual_judgment, y = as.numeric(population_judgment))) +
#   facet_wrap(version ~ title) +
#   geom_point(alpha = 0.5, show.legend = FALSE, aes(colour = individual_judgment),
#              position = position_nudge(x = +0.1)) +
#   theme_bw() +
#   stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.1, colour = "red",
#                position = position_nudge(x = +0.1)) +
#   stat_summary(fun = mean, shape = 18, size = 1, geom = "point", colour = "red",
#                position = position_nudge(x = +0.1)) +
#   stat_summary(fun=mean, geom="label", aes(label = round(..y..,2), hjust = -0.25),
#                position = position_nudge(x = +0.1)) +
#   geom_errorbar(aes(ymin=ci_low, ymax=ci_high),
#                 width=.1,                    # Width of the error bars
#                 position=position_nudge(-0.1)) +
#   geom_point(aes(y = true_proportion), shape = 18, size = 3,
#              position = position_nudge(-0.1)) +
#   geom_text(aes(y = true_proportion, label = round(true_proportion, digits = 2)),
#             position=position_nudge(-0.25)) +
#   ylab("Distribution of responses (and estimates), %") +
#   xlab("Individual judgment") +
#   ggtitle("Comparing real vs. estimated consensus")
# FISHER ONE-SAMPLE TEST TO DETERMINE WHETHER (SUBJECTIVE JUDGMENT) - (TRUE PROPORTION) > 0
fisherTest <- oneSamplePermutationTest((transformed %>% filter(version == "controversial"))$difference,
alternative = "greater", mu = 0, exact = FALSE,
n.permutations = 10000, seed = NULL)
mean = mean((transformed %>% filter(version == "controversial"))$difference)
ciLow = mean - ci.low((transformed %>% filter(version == "controversial"))$difference)
ciHigh = mean + ci.high((transformed %>% filter(version == "controversial"))$difference)
# POST-HOC REGRESSION ANALYSIS REPORTED IN COGSCI PAPER
transformed_postHocRegression <- transformed %>%
filter(version %in% c("unambiguous_covered", "unambiguous_uncovered")) %>%
mutate(majorityResponse = case_when(version == "unambiguous_covered" & individual_judgment == "yes" ~ TRUE,
version == "unambiguous_uncovered" & individual_judgment == "no" ~ TRUE,
TRUE ~ FALSE))
table(transformed_postHocRegression$majorityResponse)
options(mc.cores = parallel::detectCores())
#options(mc.cores = 1)
m <- brm(majorityResponse ~ version + (1|workerid) + (version|title),
family = bernoulli(link = "logit"), data = transformed_postHocRegression)
# bar plot of response proportions alongside agreement estimates
props = transformed %>%
mutate(Yes = case_when(individual_judgment == "yes" ~ 1,
TRUE ~ 0),
No = case_when(individual_judgment == "no" ~ 1,
TRUE ~ 0),
CantDecide = case_when(individual_judgment == "cantdecide" ~ 1,
TRUE ~ 0)) %>%
group_by(version) %>%
summarise(ProportionYes = mean(Yes), YesCILow=ci.low(Yes), YesCIHigh=ci.high(Yes),
ProportionNo = mean(No), NoCILow=ci.low(No), NoCIHigh=ci.high(No),
ProportionCantDecide = mean(CantDecide), CantDecideCILow=ci.low(CantDecide), CantDecideCIHigh=ci.high(CantDecide)) %>%
ungroup() %>%
mutate(YesYMin=ProportionYes-YesCILow,YesYMax=ProportionYes+YesCIHigh,
NoYMin=ProportionNo-NoCILow,NoYMax=ProportionNo+NoCIHigh,
CantDecideYMin=ProportionCantDecide-CantDecideCILow,CantDecideYMax=ProportionCantDecide+CantDecideCIHigh)
yes = props %>%
select(version,ProportionYes,YesYMax,YesYMin) %>%
rename(Proportion=ProportionYes,YMax=YesYMax,YMin=YesYMin) %>%
mutate(Response="yes",ResponseType="individual")
no = props %>%
select(version,ProportionNo,NoYMax,NoYMin) %>%
rename(Proportion=ProportionNo,YMax=NoYMax,YMin=NoYMin) %>%
mutate(Response="no",ResponseType="individual")
cantdecide = props %>%
select(version,ProportionCantDecide,CantDecideYMax,CantDecideYMin) %>%
rename(Proportion=ProportionCantDecide,YMax=CantDecideYMax,YMin=CantDecideYMin) %>%
mutate(Response="cantdecide",ResponseType="individual")
pop_judgments = transformed %>%
group_by(version,individual_judgment) %>%
summarise(Proportion = mean(population_judgment/100), CILow=ci.low(population_judgment/100), CIHigh=ci.high(population_judgment/100)) %>%
ungroup() %>%
mutate(Response=individual_judgment,ResponseType="agreement_estimate", YMin=Proportion-CILow,YMax=Proportion+CIHigh) %>%
select(-individual_judgment)
responses = bind_rows(yes,no,cantdecide,pop_judgments) %>%
mutate(Condition = fct_relevel(version,"unambiguous_covered","controversial"),
ResponseType = fct_relevel(ResponseType,"individual"),
Response = fct_relevel(Response,"yes","no"))
dodge=position_dodge(.9)
levels(responses$ResponseType) <- c("Individual","Agreement estimate")
ggplot(responses, aes(x=Response,y=Proportion,fill=Condition,alpha=ResponseType)) +
geom_bar(stat="identity",position=dodge) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.2,position=dodge) +
scale_fill_manual(values=cbPalette,labels=c("unambiguous_covered"="Covered","unambiguous_uncovered"="Not covered", "controversial" = "Controversial")) + #labels=c("cantdecide"="can't\ndecide")) +
scale_alpha_discrete(range = c(1, .4),name="Response type",labels=c("agreement_estimate"="agreement\nestimate")) +
ylab("Proportion of responses") +
scale_x_discrete(labels=c("cantdecide"="Can't\nDecide","yes"="Yes","no"="No")) +
theme(legend.position="top",legend.direction="vertical",
text=element_text(size=14))
ggsave("graphs/responses.pdf",width=5,height=3.5)
names(transformed)
nrow(transformed)
# plot agreement against response proportions
perfect_estimates = data.frame(x=c(0,.5,1),y=c(1,.5,1))
d_item_responses = as_tibble(unique(transformed[,c("true_proportion","agreement_mean","individual_judgment","title","version")])) %>%
mutate(Condition=fct_relevel(version,"unambiguous_covered"),
individual_judgment = factor(individual_judgment))
levels(d_item_responses$individual_judgment) <- c("cantdecide","No","Yes")
ggplot(d_item_responses %>% filter(individual_judgment!="cantdecide")) +
geom_point(aes(x=true_proportion/100,y=agreement_mean/100,color=Condition)) +
geom_smooth(aes(x=true_proportion/100,y=agreement_mean/100,color=Condition)) +
# geom_point(data=perfect_estimates, aes(x=x,y=y)) +
# geom_line(data=perfect_estimates, aes(x=x,y=y,group=1),linetype="dashed") +
geom_abline(intercept=0,slope=1,linetype="dashed") +
scale_color_manual(values=cbPalette,name="Condition",labels=c("unambiguous_covered"="Covered","unambiguous_uncovered"="Not covered", "controversial" = "Controversial")) +
xlim(0,1) +
ylim(0,1) +
xlab("Proportion of response") +
ylab("Mean agreement estimate") +
facet_wrap(~individual_judgment) + #facet by version
theme(text=element_text(size=15),
legend.position = "bottom")
ggsave("graphs/props_vs_agreement.pdf",width=7.5,height=4)
#update post hoc graph
perfect_estimates = data.frame(x=c(0,.5,1),y=c(1,.5,1))
d_item_responses = as_tibble(unique(transformed[,c("true_proportion","agreement_mean","individual_judgment","title","version")])) %>%
mutate(Condition=fct_relevel(version,"unambiguous_covered"),
individual_judgment = factor(individual_judgment))
levels(d_item_responses$individual_judgment) <- c("cantdecide","No","Yes")
ggplot(d_item_responses %>% filter(individual_judgment!="cantdecide")) +
geom_point(aes(x=true_proportion/100,y=agreement_mean/100,color=individual_judgement)) +
geom_smooth(aes(x=true_proportion/100,y=agreement_mean/100,color=individiual_judgement)) +
# geom_point(data=perfect_estimates, aes(x=x,y=y)) +
# geom_line(data=perfect_estimates, aes(x=x,y=y,group=1),linetype="dashed") +
geom_abline(intercept=0,slope=1,linetype="dashed") +
#  scale_color_manual(values=cbPalette,name="Individual Judgement",labels=c("unambiguous_covered"="Covered","unambiguous_uncovered"="Not covered", "controversial" = "Controversial")) +
xlim(0,1) +
ylim(0,1) +
xlab("Proportion of response") +
ylab("Mean agreement estimate") +
facet_wrap(~Condition) + #facet by version
theme(text=element_text(size=15),
legend.position = "bottom")
# plot agreement against response proportions
perfect_estimates = data.frame(x=c(0,.5,1),y=c(1,.5,1))
d_item_responses = as_tibble(unique(transformed[,c("true_proportion","agreement_mean","individual_judgment","title","version")])) %>%
mutate(Condition=fct_relevel(version,"unambiguous_covered"),
individual_judgment = factor(individual_judgment))
levels(d_item_responses$individual_judgment) <- c("cantdecide","No","Yes")
ggplot(d_item_responses %>% filter(individual_judgment!="cantdecide")) +
geom_point(aes(x=true_proportion/100,y=agreement_mean/100,color=Condition)) +
geom_smooth(aes(x=true_proportion/100,y=agreement_mean/100,color=Condition)) +
# geom_point(data=perfect_estimates, aes(x=x,y=y)) +
# geom_line(data=perfect_estimates, aes(x=x,y=y,group=1),linetype="dashed") +
geom_abline(intercept=0,slope=1,linetype="dashed") +
scale_color_manual(values=cbPalette,name="Condition",labels=c("unambiguous_covered"="Covered","unambiguous_uncovered"="Not covered", "controversial" = "Controversial")) +
xlim(0,1) +
ylim(0,1) +
xlab("Proportion of response") +
ylab("Mean agreement estimate") +
facet_wrap(~individual_judgment) + #facet by version
theme(text=element_text(size=15),
legend.position = "bottom")
perfect_estimates = data.frame(x=c(0,.5,1),y=c(1,.5,1))
d_item_responses = as_tibble(unique(transformed[,c("true_proportion","agreement_mean","individual_judgment","title","version")])) %>%
mutate(Condition=fct_relevel(version,"unambiguous_covered"),
individual_judgment = factor(individual_judgment))
levels(d_item_responses$individual_judgment) <- c("cantdecide","No","Yes")
ggplot(d_item_responses %>% filter(individual_judgment!="cantdecide")) +
geom_point(aes(x=true_proportion/100,y=agreement_mean/100,color=individual_judgment)) +
geom_smooth(aes(x=true_proportion/100,y=agreement_mean/100,color=individiual_judgment)) +
# geom_point(data=perfect_estimates, aes(x=x,y=y)) +
# geom_line(data=perfect_estimates, aes(x=x,y=y,group=1),linetype="dashed") +
geom_abline(intercept=0,slope=1,linetype="dashed") +
#  scale_color_manual(values=cbPalette,name="Individual Judgement",labels=c("unambiguous_covered"="Covered","unambiguous_uncovered"="Not covered", "controversial" = "Controversial")) +
xlim(0,1) +
ylim(0,1) +
xlab("Proportion of response") +
ylab("Mean agreement estimate") +
facet_wrap(~Condition) + #facet by version
theme(text=element_text(size=15),
legend.position = "bottom")
perfect_estimates = data.frame(x=c(0,.5,1),y=c(1,.5,1))
d_item_responses = as_tibble(unique(transformed[,c("true_proportion","agreement_mean","individual_judgment","title","version")])) %>%
mutate(Condition=fct_relevel(version,"unambiguous_covered"),
individual_judgment = factor(individual_judgment))
levels(d_item_responses$individual_judgment) <- c("cantdecide","No","Yes")
ggplot(d_item_responses %>% filter(individual_judgment!="cantdecide")) +
geom_point(aes(x=true_proportion/100,y=agreement_mean/100,color=individual_judgment)) +
geom_smooth(aes(x=true_proportion/100,y=agreement_mean/100,color=individiual_judgment)) +
# geom_point(data=perfect_estimates, aes(x=x,y=y)) +
# geom_line(data=perfect_estimates, aes(x=x,y=y,group=1),linetype="dashed") +
geom_abline(intercept=0,slope=1,linetype="dashed") +
#  scale_color_manual(values=cbPalette,name="Individual Judgement",labels=c("unambiguous_covered"="Covered","unambiguous_uncovered"="Not covered", "controversial" = "Controversial")) +
xlim(0,1) +
ylim(0,1) +
xlab("Proportion of response") +
ylab("Mean agreement estimate") +
facet_wrap(~Condition) + #facet by version
theme(text=element_text(size=15),
legend.position = "bottom")
ggplot(d_item_responses %>% filter(individual_judgment!="cantdecide")) +
geom_point(aes(x=true_proportion/100,y=agreement_mean/100,color=individual_judgment)) +
geom_smooth(aes(x=true_proportion/100,y=agreement_mean/100,color=individual_judgment)) +
# geom_point(data=perfect_estimates, aes(x=x,y=y)) +
# geom_line(data=perfect_estimates, aes(x=x,y=y,group=1),linetype="dashed") +
geom_abline(intercept=0,slope=1,linetype="dashed") +
#  scale_color_manual(values=cbPalette,name="Individual Judgement",labels=c("unambiguous_covered"="Covered","unambiguous_uncovered"="Not covered", "controversial" = "Controversial")) +
xlim(0,1) +
ylim(0,1) +
xlab("Proportion of response") +
ylab("Mean agreement estimate") +
facet_wrap(~Condition) + #facet by version
theme(text=element_text(size=15),
legend.position = "bottom")
